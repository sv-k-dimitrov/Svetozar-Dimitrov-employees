import csv
from datetime import date
from collections import defaultdict
from itertools import combinations
from dateutil import parser

csv_file_path = 'csv'

def date_parser(date_str):
    if date_str == 'NULL':
        return date.today()
    try:
        return parser.parse(date_str).date()
    except (ValueError, OverflowError):
        raise ValueError(f"Date format not recognized for date: {date_str}")

def get_project_data(file):
    proj_dict = defaultdict(list)
    with open(file, 'r') as f:
        for row in csv.DictReader(f):
            proj_dict[int(row['ProjectID'])].append((
                int(row['EmpID']),
                date_parser(row['DateFrom'].strip()),
                date_parser(row['DateTo'].strip())
            ))
    return proj_dict

def format_days_to_ymd(days):
    years = days // 365
    months = (days % 365) // 30
    remaining_days = (days % 365) % 30
    return years, months, remaining_days

def fetch_employees_match(projects):
    employees_match = [
        (id_first, id_second, project_id, (min(first_end_date, second_end_date) - max(first_start_date, second_start_date)).days)
        for project_id, project in projects.items()
        for (id_first, first_start_date, first_end_date), (id_second, second_start_date, second_end_date) in combinations(project, 2)
        if (min(first_end_date, second_end_date) - max(first_start_date, second_start_date)).days > 0
    ]
    top_pair = max(employees_match, key=lambda x: x[3])

    top_pair_projects = sorted(list(filter(
        lambda x: (x[0], x[1]) == top_pair[:2] or (x[1], x[0]) == top_pair[:2], 
        employees_match
    )))
    
    return top_pair, top_pair_projects

def display_results(file_path):
    projects = get_project_data(file_path)
    top_pair, common_projects = fetch_employees_match(projects)
    
    if top_pair is not None:
        id_first, id_second, proj_id, days_worked = top_pair
        years, months, days = format_days_to_ymd(days_worked)
        print(f"The pair of employees who worked together the longest are Employee {id_first} and Employee {id_second} with an overlap of {years} years, {months} months, and {days} days on project {proj_id}.")
        print("\nCommon Projects:")
        
        print(f"{'Employee ID #1':<15} {'Employee ID #2':<15} {'Project ID':<12} {'Days worked':<12}")
        for emp1, emp2, proj_id, days_worked in common_projects:
            print(f"{emp1:<15} {emp2:<15} {proj_id:<12} {days_worked:<12}")
    else:
        print("No valid pairs found.")

display_results(csv_file_path)
